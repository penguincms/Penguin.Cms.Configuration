<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Penguin.Cms.Configuration</name>
    </assembly>
    <members>
        <member name="T:Penguin.Cms.Configuration.CmsConfiguration">
            <summary>
            A key value pair representing a database persistable configuration
            </summary>
        </member>
        <member name="P:Penguin.Cms.Configuration.CmsConfiguration.Name">
            <summary>
            The Key for the configuration
            </summary>
        </member>
        <member name="P:Penguin.Cms.Configuration.CmsConfiguration.Value">
            <summary>
            The value of the configuration
            </summary>
        </member>
        <member name="T:Penguin.Cms.Configuration.Repositories.Providers.RepositoryProvider">
            <summary>
            A configuation provider that wraps a repository for cms configurations
            </summary>
        </member>
        <member name="P:Penguin.Cms.Configuration.Repositories.Providers.RepositoryProvider.AllConfigurations">
            <summary>
            All configurations found in the repository
            </summary>
        </member>
        <member name="P:Penguin.Cms.Configuration.Repositories.Providers.RepositoryProvider.AllConnectionStrings">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:Penguin.Cms.Configuration.Repositories.Providers.RepositoryProvider.Repository">
            <summary>
            The Repository used when constructing this instance
            </summary>
        </member>
        <member name="M:Penguin.Cms.Configuration.Repositories.Providers.RepositoryProvider.#ctor(Penguin.Persistence.Abstractions.Interfaces.IRepository{Penguin.Cms.Configuration.CmsConfiguration})">
            <summary>
            Creates a new instance of this configuration provider
            </summary>
            <param name="provider">The repository implementation to wrap</param>
        </member>
        <member name="M:Penguin.Cms.Configuration.Repositories.Providers.RepositoryProvider.GetConfiguration(System.String)">
            <summary>
            Gets a configuration by Key
            </summary>
            <param name="Key">The Key of the configuration to get</param>
            <returns>The value (or null) of the configuration</returns>
        </member>
        <member name="M:Penguin.Cms.Configuration.Repositories.Providers.RepositoryProvider.GetConnectionString(System.String)">
            <summary>
            Unused
            </summary>
            <param name="Name">Unused</param>
            <returns>Null</returns>
        </member>
        <member name="T:Penguin.Cms.Configuration.Services.ConfigurationService">
            <summary>
            A CMS configuration service that wraps a list of configuration providers and provides accessibility methods
            </summary>
        </member>
        <member name="P:Penguin.Cms.Configuration.Services.ConfigurationService.RequestedConfigurations">
            <summary>
            Contains a list of all the configuration names and values requested and returned by the service. Intended to allow for identifying unset configurations
            </summary>
        </member>
        <member name="P:Penguin.Cms.Configuration.Services.ConfigurationService.AllConfigurations">
            <summary>
            A dictionary of all configurations with value determined by precedence
            </summary>
        </member>
        <member name="P:Penguin.Cms.Configuration.Services.ConfigurationService.AllConnectionStrings">
            <summary>
            A dictionary of all connection strings with value determined by precendence
            </summary>
        </member>
        <member name="P:Penguin.Cms.Configuration.Services.ConfigurationService.CanWrite">
            <summary>
            True, this implementation of IProvideConfigurations has the potential to allow for writing
            </summary>
        </member>
        <member name="P:Penguin.Cms.Configuration.Services.ConfigurationService.Providers">
            <summary>
            A list of child providers used when constucting this instance
            </summary>
        </member>
        <member name="M:Penguin.Cms.Configuration.Services.ConfigurationService.#ctor">
            <summary>
            Initializes a new instance of the configuration service
            </summary>
        </member>
        <member name="M:Penguin.Cms.Configuration.Services.ConfigurationService.#ctor(Penguin.Configuration.Abstractions.Interfaces.IProvideConfigurations[])">
            <summary>
            Ordered by most important first. Constructs a new instance of this service
            </summary>
            <param name="providers">And ordered list of configuration providers</param>
        </member>
        <member name="M:Penguin.Cms.Configuration.Services.ConfigurationService.#ctor(System.Collections.Generic.IEnumerable{Penguin.Configuration.Abstractions.Interfaces.IProvideConfigurations})">
            <summary>
            Ordered by most important first. Constructs a new instance of this service
            </summary>
            <param name="providers">And ordered list of configuration providers</param>
        </member>
        <member name="M:Penguin.Cms.Configuration.Services.ConfigurationService.#ctor(Penguin.Persistence.Abstractions.Interfaces.IRepository{Penguin.Cms.Configuration.CmsConfiguration},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Creates a new instance of this service using the provided repository and IConfiguration
            </summary>
            <param name="configurationRepository">A repository implementation for accessing database configurations</param>
            <param name="configuration">An IConfiguration object used by .Net Core applications</param>
        </member>
        <member name="M:Penguin.Cms.Configuration.Services.ConfigurationService.FlushCache">
            <summary>
            Flushes all values cached (static) by the configuration service
            </summary>
        </member>
        <member name="M:Penguin.Cms.Configuration.Services.ConfigurationService.AcceptMessage(Penguin.Messaging.Persistence.Messages.Updating{Penguin.Cms.Configuration.CmsConfiguration})">
            <summary>
            Message Handler that removes a configuration from the cache when the value is updated
            </summary>
            <param name="target">A message containing the configuration to be removed</param>
        </member>
        <member name="M:Penguin.Cms.Configuration.Services.ConfigurationService.GetAll">
            <summary>
            Returns all values from all configurations as CMS configuration objects
            </summary>
            <returns>All values from all configurations as CMS configuration objects</returns>
        </member>
        <member name="M:Penguin.Cms.Configuration.Services.ConfigurationService.GetConfiguration(System.String)">
            <summary>
            Gets a configuration value by name
            </summary>
            <param name="Key">The key of the value to get</param>
            <returns>The value (or null) of the requested configuration</returns>
        </member>
        <member name="M:Penguin.Cms.Configuration.Services.ConfigurationService.GetConnectionString(System.String)">
            <summary>
            Gets a connection string by name
            </summary>
            <param name="Name">The name of the connection string</param>
            <returns>The value (or null) of the connection string</returns>
        </member>
        <member name="M:Penguin.Cms.Configuration.Services.ConfigurationService.SetConfiguration(System.String,System.String)">
            <summary>
            Searches the included providers for a writable configuration, and saves the value in the first writable provider
            </summary>
            <param name="Name">The configuration name to update</param>
            <param name="Value">The new value</param>
            <returns>True if a writable provider was found to persist the value</returns>
        </member>
        <member name="M:Penguin.Cms.Configuration.Services.ConfigurationService.TryGet(System.String,System.String@)">
            <summary>
            Attempts to get a configuration value without fail
            </summary>
            <param name="key">The key of the value to get</param>
            <param name="value">a ref to the value to set</param>
            <returns>A bool indicating whether or not an error occurred</returns>
        </member>
    </members>
</doc>
